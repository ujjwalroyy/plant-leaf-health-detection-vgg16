# -*- coding: utf-8 -*-
"""plant_leaf_detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFQZTCBavkAnvwSvhaU3ZE8-Da5Nqbeg
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt
import cv2

import io
import ipywidgets as widgets
from IPython.display import display
import PIL
from PIL import Image
import random

IMAGE_SIZE = (128, 128)
BATCH_SIZE = 32
EPOCHS = 10

def preprocess_image(image):
    image = np.array(image)
    image = cv2.resize(image, IMAGE_SIZE)
    image = image / 255.0
    return image

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/datasets/',
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/datasets/',
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=EPOCHS,
    validation_data=validation_generator,
    validation_steps=len(validation_generator)
)

model.save('leaf_health_model.h5')

loss, accuracy = model.evaluate(validation_generator)
print(f'Validation Loss: {loss}, Validation Accuracy: {accuracy}')

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

def on_image_upload(change):
    img = change['new']
    for filename, contents in img.items():
        pil_image = Image.open(io.BytesIO(contents['content']))
        img_array = preprocess_image(pil_image)
        img_array = np.expand_dims(img_array, axis=0)
        prediction = model.predict(img_array)[0]
        predicted_class = 'Unhealthy Leaf' if prediction > 0.5 else 'Healthy Leaf'

        plt.imshow(pil_image)
        plt.title(f'Predicted Class: {predicted_class}')
        plt.axis('off')
        plt.show()

upload_btn = widgets.FileUpload(accept='image/*', multiple=False)

upload_btn.observe(on_image_upload, names=['value'])

display(upload_btn)